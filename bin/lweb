#!/usr/bin/env python
'''
Written by Dmitry Chirikov <dmitry@chirikov.ru>
This file is part of Luna, cluster provisioning tool
https://github.com/dchirikov/luna

This file is part of Luna.

Luna is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Luna is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Luna.  If not, see <http://www.gnu.org/licenses/>.

'''

import argparse
import logging
import logging.handlers
import sys
import pymongo
import signal
import time
import os
import pwd
import tornado
import tornado.ioloop
import tornado.web
import tornado.options
import tornado.httpserver
import tornado.process
import traceback

#from libtorrent import bencode
import luna
from luna import MacUpdater
from luna import utils
from luna.config import db_name

try:
    log_dir = os.environ['LUNA_LOGDIR']
except KeyError:
    log_dir = '/var/log/luna'


class LWeb(object):

    def __init__(self):

        self.parser = self.parse_args()

        logging.basicConfig()
        self.logger = logging.getLogger('lweb')

        try:
            self.daemon = bool(int(os.environ['LWEB_DAEMON']))
        except KeyError:
            self.daemon = True

        if tornado.version_info[0] > 3:
            tornado.options.options.log_to_stderr = False
        else:
            tornado.options.options['log_to_stderr'].set(False)

        self.macupdater = None
        self.starter_pid = None
        self.http_server = None

    def parse_args(self):
        parser = argparse.ArgumentParser(prog='lweb')
        sp = parser.add_subparsers()

        sp_start = sp.add_parser('start', help='Starts %(prog)s daemon')
        sp_start.set_defaults(run=self.start)

        sp_stop = sp.add_parser('stop', help='Stops %(prog)s daemon')
        sp_stop.set_defaults(run=self.stop)

        sp_restart = sp.add_parser('restart', help='Restarts %(prog)s daemon')
        sp_restart.set_defaults(run=self.restart)

        return parser

    def run_app(self):
        """Start Tornado IOLoop for this application.
        """

        # start mackupdater in forked process
        tornado.options.parse_command_line()
        luna_opts = luna.Cluster()
        port = luna_opts.get('frontend_port') or 7050
        lweb_port = luna_opts.get('server_port') or 7051
        server_ip = luna_opts.get('frontend_address')
        if luna_opts.get('frontend_https'):
            protocol = 'https'
        else:
            protocol = 'http'
        path = luna_opts.get('path')
        num_proc = int(luna_opts.get('lweb_num_proc')) or 0
        if not bool(server_ip):
            self.logger.error('Server IP needs to be configured')
            return None

        try:
            #mongo_db =  motor.motor_tornado.MotorClient()[db_name]
            conn_options = utils.helpers.get_con_options()
            mongo_db = pymongo.MongoClient(**conn_options)[db_name]
        except:
            self.logger.error("Unable to connect to MongoDB.")
            raise RuntimeError
        try:
            mongo_db['tracker'].create_index(
                "updated", expireAfterSeconds=3600)
        except:
            pass

        pid = os.fork()
        if pid == 0:
            self.macupdater = MacUpdater(
                mongo_db, logger=self.logger, interval=30)
            self.macupdater.run()
            return

        self.macupdater_pid = pid
        self.logger.info(
            "MacUpdater was started. PID = {}".format(self.macupdater_pid))

        tracker_params = {}
        tracker_params['luna_tracker_interval'] = luna_opts.get(
            'tracker_interval') or 30
        tracker_params['luna_tracker_min_interval'] = luna_opts.get(
            'tracker_min_interval') or 20
        tracker_params['luna_tracker_maxpeers'] = luna_opts.get(
            'tracker_maxpeers') or 200
        tracker_params['mongo_db'] = mongo_db

        manager_params = {}
        manager_params['protocol'] = protocol
        manager_params['server_ip'] = server_ip
        manager_params['server_port'] = port
        manager_params['app_logger'] = self.logger
        manager_params['mongo_db'] = mongo_db

        template_path = path + '/templates'

        lweb = tornado.web.Application([
            (r"/announce.*",
                luna.AnnounceHandler, dict(params=tracker_params)),
            (r"/scrape.*",
                luna.ScrapeHandler, dict(params=tracker_params)),
            (r"/luna.*",
                luna.Manager, dict(params=manager_params)),
        ], template_path=template_path, xheaders=True)
        self.logger.info('Starting lweb on port %d' % lweb_port)

        self.starter_pid = os.getpid()

        # FIXME
        # try/except workaround here to avoid
        # failing on RuntimeError and IOError
        # might be related to this open issue
        # https://github.com/tornadoweb/tornado/issues/2131
        # tornado tries to fork when ioloops of childs already stoped
        sockets = tornado.netutil.bind_sockets(lweb_port, address='127.0.0.1')
        try:
            tornado.process.fork_processes(num_proc)
        except RuntimeError:
            return
        self.http_server = tornado.httpserver.HTTPServer(lweb)
        try:
            self.http_server.add_sockets(sockets)
        except IOError:
            return

        child_pid = os.getpid()
        self.logger.info(
            "Started tornado server PID = {}".format(child_pid))

        tornado.ioloop.IOLoop.instance().start()

    def check_path(self, path, user):
        if not user:
            self.logger.error("User needs to be configured.")
            raise RuntimeError
        try:
            user_id = pwd.getpwnam(user)
        except:
            self.logger.error("No such user '{}' exists.".format(user))
            raise RuntimeError
        if os.path.exists(path):
            path_stat = os.stat(path)
            if (path_stat.st_uid != user_id.pw_uid
                    or path_stat.st_gid != user_id.pw_gid):
                self.logger.error("Path is not owned by '{}".format(user))
                raise RuntimeError
            return path
        self.logger.info("Path '{}' does not exist. Creating.".format(path))
        try:
            os.makedirs(path)
        except:
            self.logger.error("Cannot create '{}'.".format(path))
            raise RuntimeError
        try:
            os.chown(path, user_id.pw_uid, user_id.pw_gid)
        except:
            self.logger.error("Cannot chown '{}' to '{}'.".format(path, user))
            raise RuntimeError
        return path

    def sigterm_handler(self, sig, frame):

        my_pid = os.getpid()

        self.logger.info("Received SIGTERM on PID = {}".format(my_pid))
        tornado.ioloop.IOLoop.instance().stop()

        if self.macupdater is not None:
            self.logger.info("Stopping macupdater.")
            self.macupdater.stop()
        return

    def daemonize(self):
        """
        do the UNIX double-fork magic, see Stevens' "Advanced
        Programming in the UNIX Environment" for details (ISBN 0201563177)
        http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16
        """

        log_app_handler = logging.handlers.RotatingFileHandler(
            log_dir + '/lweb.log',
            maxBytes=1073741824,
            backupCount=5
        )
        #log_app_handler.doRollover()
        self.logger.propagate = False
        formatter = logging.Formatter(
            "%(asctime)s\t%(levelname)s\t%(message)s")
        log_app_handler.setFormatter(formatter)
        self.logger.addHandler(log_app_handler)

        if tornado.version_info[0] > 3:
            tornado.options.options.log_to_stderr = False
            tornado.options.options.log_file_prefix = (
                log_dir + '/lweb_tornado.log'
            )
            tornado.options.options.log_file_max_size = 1073741824
            tornado.options.options.log_file_num_backups = 5
        else:
            tornado.options.options['log_to_stderr'].set(False)
            tornado.options.options['log_file_prefix'].set(
                log_dir + '/lweb_tornado.log')
            tornado.options.options['log_file_max_size'].set(1073741824)
            tornado.options.options['log_file_num_backups'].set(5)

        stdin = '/dev/null'
        stdout = '/dev/null'
        stderr = '/dev/null'
        self.logger.info("Starting lweb as daemon")
        try:
            pid = os.fork()
            if pid > 0:
                # exit first parent
                sys.exit(0)
        except OSError, e:
            self.logger.error(
                "fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

        # decouple from parent environment
        os.chdir("/")
        os.setsid()
        os.umask(0)

        # do second fork
        try:
            pid = os.fork()
            if pid > 0:
                # exit from second parent
                sys.exit(0)
        except OSError, e:
            self.logger.error(
                "fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

        # redirect standard file descriptors
        sys.stdout.flush()
        sys.stderr.flush()
        si = file(stdin, 'r')
        so = file(stdout, 'a+')
        se = file(stderr, 'a+', 0)
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())

        # write pidfile
        #atexit.register(exit_handler)
        pid = str(os.getpid())

        self.logger.info("lweb pid: '{}'".format(pid))
        self.logger.info("lweb pidfile: '{}'".format(self.pidfile))
        f = open(self.pidfile, "w+")
        f.write("%s\n" % pid)
        f.close()

    def start(self, args):
        """
        Start the daemon
        """
        self.logger.info("Starting lweb")
        # Check for a pidfile to see if the daemon already runs
        try:
            self.pidfile = self.check_path(
                os.path.dirname(self.pidfile), self.runas_user
            ) + '/' + os.path.basename(self.pidfile)
            pf = file(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None
        user_id = pwd.getpwnam(self.runas_user)
        os.setgid(user_id.pw_gid)
        os.setuid(user_id.pw_uid)
        if pid:
            message = "pidfile %s already exist. Daemon already running?\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)

        # Start the daemon
        if self.daemon:
            self.daemonize()
            signal.signal(signal.SIGTERM, self.sigterm_handler)
            try:
                self.run_app()
            except SystemExit:
                return
            except:
                self.logger.error(traceback.format_exc())
        else:
            try:
                self.run_app()
            except KeyboardInterrupt:
                self.logger.info('Lweb Stopped.')
                sys.exit(0)

    def stop(self, args):
        """
        Stop the daemon
        """
        def cleanup(msg, pidfile):
            err = str(msg)
            if err.find("No such process") > 0:
                if os.path.exists(pidfile):
                    os.remove(pidfile)
                    sys.exit(0)
            else:
                self.logger.error(err)
                sys.exit(1)

        # Get the pid from the pidfile
        self.logger.info("Stopping lweb")
        try:
            pf = file(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if not pid:
            message = "pidfile %s does not exist. Daemon not running?\n"
            self.logger.error(message % self.pidfile)
            return  # not an error in a restart

        # Try killing the daemon process
        try:
            pgid = os.getpgid(pid)
        except OSError, err:
            pgid = 0
            cleanup(err, self.pidfile)

        if pgid == 0:
            self.logger.error("Unable to stop lweb. No process found.")
            sys.exit(1)

        for i in range(10):
            try:
                os.killpg(pgid, signal.SIGTERM)
                self.logger.info("Stopping {}".format(pid))
                time.sleep(3.0)
            except OSError, err:
                cleanup(err, self.pidfile)

        self.logger.error("Unable to shutdown daemon gracefully. Kill it.")

        os.killpg(pgid, signal.SIGKILL)
        if os.path.exists(self.pidfile):
            os.remove(self.pidfile)
        sys.exit(0)

    def restart(self, args):
        """
        Restart the daemon
        """
        self.stop(args)
        self.start(args)

    def run(self):
        while True:
            try:
                cluster = luna.Cluster()
            except:
                self.logger.error('Cannot find cluster definition in MongoDB.')
                time.sleep(5)
                continue
            break
        self.runas_user = cluster.get('user')
        if not bool(self.runas_user):
            self.runas_user = 'luna'
        self.pidfile = cluster.get('lweb_pidfile')
        if not bool(self.pidfile):
            self.pidfile = '/run/luna/lweb.pid'

        parser = self.parser.parse_args()
        parser.run(parser)

if __name__ == '__main__':
    lweb = LWeb()
    if lweb.run():
        sys.exit(0)
    sys.exit(128)
